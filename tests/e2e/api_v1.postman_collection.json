{
	"info": {
		"_postman_id": "b7daecf2-89c3-4203-a003-2b69d9b68cab",
		"name": "NodeNotes v1",
		"description": "**NodeNotes E2E tests coverage snippets.**\n\n_Linear testing scenario, negatives and positives._\n\n_All endpoints coverage_",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27933519",
		"_collection_link": "https://blue-trinity-780436.postman.co/workspace/My-Workspace~ad9419b7-fa53-4d0c-8bc5-91d56b7dcbdc/collection/27933519-b7daecf2-89c3-4203-a003-2b69d9b68cab?action=share&source=collection_link&creator=27933519"
	},
	"item": [
		{
			"name": "Healthcheck",
			"item": [
				{
					"name": "Healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const result = pm.response.json()\r",
									"pm.test(\"Database is accesible\", function () {\r",
									"    pm.expect(result.databaseAccess).to.equal(true)\r",
									"});\r",
									"\r",
									"pm.test(\"Cache is accesible\", function () {\r",
									"    pm.expect(result.cacheAccess).to.equal(true)\r",
									"});\r",
									"\r",
									"pm.test(\"Uptimes are greater than 0\", function () {\r",
									"    pm.expect(result.serverUptimeInSec).to.be.greaterThan(-1)\r",
									"    pm.expect(result.databaseUptimeInSec).to.be.greaterThan(-1)\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/healthcheck",
							"protocol": "{{protocol}}",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"healthcheck"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registration",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create 1st user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"firstUserLogin\", JSON.parse(pm.request.body.raw).login)\r",
											"pm.globals.set(\"firstUserEmail\", JSON.parse(pm.request.body.raw).email)\r",
											"pm.globals.set(\"firstUserPassword\", JSON.parse(pm.request.body.raw).password)\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamps is created\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdAt).to.exist;\r",
											"    pm.expect(jsonData.updatedAt).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Password is missing\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.password).to.not.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response 'login' field is valid\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.login).to.be.equal(\r",
											"        pm.globals.get(\"firstUserLogin\")\r",
											"    )\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"login\": \"user_one\",\r\n\t\"email\": \"user_one@gmail.com\",\r\n\t\"password\": \"12345678\",\r\n\t\"username\": \"The First User\",\r\n\t\"personalColor\": \"#ffffff\",\r\n\t\"isCollaborating\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create 2nd user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"secondUserLogin\", JSON.parse(pm.request.body.raw).login);\r",
											"pm.globals.set(\"secondUserEmail\", JSON.parse(pm.request.body.raw).email);\r",
											"pm.globals.set(\"secondUserPassword\", JSON.parse(pm.request.body.raw).password);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Timestamps is created\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdAt).to.exist;\r",
											"    pm.expect(jsonData.updatedAt).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Password is missing\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.password).to.not.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Response 'login' field is valid\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.login).to.be.equal(\r",
											"        pm.globals.get(\"secondUserLogin\")\r",
											"    )\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"login\": \"user_two\",\r\n\t\"email\": \"user_two@gmail.com\",\r\n\t\"password\": \"12345678\",\r\n\t\"username\": \"The Second User\",\r\n\t\"personalColor\": \"#ffffff\",\r\n\t\"isCollaborating\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create existing user #1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message exists\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"login\": \"user_one\",\r\n\t\"email\": \"user_one@gmail.com\",\r\n\t\"password\": \"12345678\",\r\n\t\"username\": \"The First User\",\r\n\t\"personalColor\": \"#ffffff\",\r\n\t\"isCollaborating\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create existing user #2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message exists\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.exist;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"login\": \"user_three\",\r\n\t\"email\": \"user_one@gmail.com\",\r\n\t\"password\": \"12345678\",\r\n\t\"username\": \"The First User\",\r\n\t\"personalColor\": \"#ffffff\",\r\n\t\"isCollaborating\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create user with invalid field type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"login\": \"user_three\",\r\n\t\"email\": \"user_three@gmail.com\",\r\n\t\"password\": [],\r\n\t\"username\": \"The First User\",\r\n\t\"personalColor\": \"#ffffff\",\r\n\t\"isCollaborating\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Additionals (no-tests)",
					"item": [
						{
							"name": "Create 3rd user (additional)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"thirdUserLogin\", JSON.parse(pm.request.body.raw).login);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"login\": \"user_three\",\n\t\"email\": \"user_three@gmail.com\",\n\t\"password\": \"12345678\",\n\t\"username\": \"The Third User\",\n\t\"personalColor\": \"#ffffff\",\n\t\"isCollaborating\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "**Create user scenario**"
		},
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Auth 1st user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token exists\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).length.is.above(60);\r",
											"    pm.expect(jsonData.expiresIn).to.exist\r",
											"})\r",
											"\r",
											"pm.globals.set(\"firstUserToken\", pm.response.json().token)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{firstUserEmail}}\",\r\n    \"password\":\"{{firstUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth 2nd user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token exists\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).length.is.above(60);\r",
											"    pm.expect(jsonData.expiresIn).to.exist\r",
											"})\r",
											"\r",
											"pm.globals.set(\"secondUserToken\", pm.response.json().token)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\":\"{{secondUserEmail}}\",\r\n    \"password\":\"{{secondUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change password (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response is success\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(true);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"firstUserPassword\", JSON.parse(pm.request.body.raw).newPassword);\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oldPassword\": \"{{firstUserPassword}}\",\r\n    \"newPassword\": \"1234567890\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/password",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Auth after password change (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Token exists\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.token).length.is.above(60);\r",
											"    pm.expect(jsonData.expiresIn).to.exist\r",
											"})\r",
											"\r",
											"pm.globals.set(\"firstUserToken\", pm.response.json().token)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{firstUserEmail}}\",\r\n    \"password\": \"{{firstUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Auth with wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{firstUserEmail}}\",\r\n    \"password\": \"__WRONG_PASSWORD__\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change password with wrong credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newPassword\": \"1312932132131321\",\r\n    \"oldPassword\": \"__WRONG_PASSWORD__\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/password",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change password to same",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newPassword\": \"{{firstUserPassword}}\",\r\n    \"oldPassword\": \"{{firstUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/password",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth",
										"password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change password without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"newPassword\": \"982q98gg928hgro\",\r\n    \"oldPassword\": \"{{firstUserPassword}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/auth/password",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"auth",
										"password"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get and update profile",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Get profile by JWT (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"1st user login validity\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.login).to.be.equal(\r",
											"        pm.globals.get(\"firstUserLogin\")\r",
											"    );\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get 2nd user profile by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"2nd user login validity\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.login).to.be.equal(\r",
											"        pm.globals.get(\"secondUserLogin\")\r",
											"    );\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/{{secondUserLogin}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"{{secondUserLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update profile (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Fields are updated\", () => {\r",
											"    let jsonData = pm.response.json()\r",
											"    pm.expect(jsonData.personalColor).to.be.equal(\"#cccccc\")\r",
											"    pm.expect(jsonData.username).to.be.equal(\"The One Time Username\")\r",
											"    \r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"personalColor\": \"#cccccc\",\r\n    \"username\": \"The One Time Username\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Get profile by JWT without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get profile by ID without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/{{secondUserLogin}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"{{secondUserLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get profile by ID that doesn't exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/12345678",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"12345678"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update profile without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personalColor\": \"#cccccc\",\n    \"username\": \"The One Time Username\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update profile with invalid field type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"personalColor\": \"#cccccc\",\n    \"username\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/users/me",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"users",
										"me"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create note",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Create note (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"ID is generated\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).is.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Timestamps is created\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdAt).to.exist;\r",
											"    pm.expect(jsonData.updatedAt).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Author is valid\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.author).to.equal(pm.globals.get(\"firstUserLogin\"));\r",
											"});\r",
											"\r",
											"\r",
											"pm.globals.set(\"firstUserNoteId\",  pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"world war 2 plan notes\",\r\n  \"content\": \"some content blah blah blah\",\r\n  \"tags\": [\r\n    \"ww2\", \"1945\"\r\n  ],\r\n  \"collaborators\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create note with collaborator (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"ID is generated\", () => {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.id).is.exist;\r",
											"})\r",
											"\r",
											"pm.test(\"Timestamps is created\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.createdAt).to.exist;\r",
											"    pm.expect(jsonData.updatedAt).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Author is valid\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.author).to.equal(pm.globals.get(\"firstUserLogin\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Collaborator exists\", () => {\r",
											"    pm.expect(\r",
											"        pm.response.json().collaborators\r",
											"    ).includes(\r",
											"        pm.globals.get(\"secondUserLogin\")\r",
											"    )\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"alaska trip\",\r\n  \"content\": \"some content blah blah blah\",\r\n  \"tags\": [\r\n    \"alaska\", \"trip\"\r\n  ],\r\n  \"collaborators\": [\r\n      \"{{secondUserLogin}}\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Create note with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create note with invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"world war 2 plan notes\",\r\n  \"content\": \"some content blah blah blah\",\r\n  \"tags\": [\r\n    \"ww2\", \"1945\"\r\n  ],\r\n  \"collaborators\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create note with not existing collaborator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"world war 2 plan notes\",\r\n  \"content\": \"some content blah blah blah\",\r\n  \"tags\": [\r\n    \"ww2\", \"1945\"\r\n  ],\r\n  \"collaborators\": [\r\n    \"____________\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create note with private collaborator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"world war 2 plan notes\",\r\n  \"content\": \"some content blah blah blah\",\r\n  \"tags\": [\r\n    \"ww2\", \"1945\"\r\n  ],\r\n  \"collaborators\": [\r\n    \"user_one\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Add and remove collaborator in note",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add 2nd user to note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"'success' field exists\", function () {",
											"    pm.expect(pm.response.json().success).to.be.equal(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{secondUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove 2nd user from note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'success' field exists\", function () {",
											"    pm.expect(pm.response.json().success).to.be.equal(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{secondUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add 2nd user to note Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"'success' field exists\", function () {",
											"    pm.expect(pm.response.json().success).to.be.equal(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{secondUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get note collaborators (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2nd user in collaborators\", function () {",
											"    pm.expect(",
											"        pm.response.json()",
											"    ).length.is.above(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get note collaborators (2nd user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"2nd user in collaborators\", function () {",
											"    pm.expect(",
											"        pm.response.json()",
											"    ).length.is.above(0)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Add user without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{secondUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"__login__\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user that already in note",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{secondUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user via restricted access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"someone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user with private profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{thirdUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add self to collaborators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{firstUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"someone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"someone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user via restricted access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"someone\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete self from collaborators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": \"{{firstUserLogin}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user with invalid field type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with invalid field type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collaboratorLogin\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user with invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get note collaborators without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}",
										"collaborators"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get non-existing note collaborators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/12345678/collaborators",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"12345678",
										"collaborators"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get and update note by id",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Get note by id (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Author is valid\", () => {",
											"    pm.expect(",
											"        pm.response.json().author",
											"    ).to.be.equal(",
											"        pm.globals.get(\"firstUserLogin\")",
											"    )",
											"})",
											"",
											"pm.test(\"Content exists\", () => {",
											"    pm.expect(",
											"        pm.response.json().content",
											"    ).length.to.be.above(0)",
											"})",
											"",
											"",
											"pm.test(\"Tags exist\", () => {",
											"    pm.expect(",
											"        pm.response.json().tags",
											"    ).length.to.be.above(0)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get note by id (2nd user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Author is valid\", () => {",
											"    pm.expect(",
											"        pm.response.json().author",
											"    ).to.be.equal(",
											"        pm.globals.get(\"firstUserLogin\")",
											"    )",
											"})",
											"",
											"pm.test(\"Content exists\", () => {",
											"    pm.expect(",
											"        pm.response.json().content",
											"    ).length.to.be.above(0)",
											"})",
											"",
											"",
											"pm.test(\"Tags exist\", () => {",
											"    pm.expect(",
											"        pm.response.json().tags",
											"    ).length.to.be.above(0)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update note (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content is updated\", function () {",
											"    pm.expect(",
											"        pm.response.json().content",
											"    ).to.be.equal(",
											"        \"Bla bla bla bla x2\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Bla bla bla bla x2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update note (2nd user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content is updated\", function () {",
											"    pm.expect(",
											"        pm.response.json().content",
											"    ).to.be.equal(",
											"        \"Bla bla bla bla x3\"",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Bla bla bla bla x3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Get note by id without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get note by id that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/12345678",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"12345678"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update note without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Bla bla bla bla x2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update note that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"Bla bla bla bla x2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/12345678",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"12345678"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update note with invalid field type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": []\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/12345678",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"12345678"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get notes",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Get collaborated notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is array\", function () {",
											"    pm.expect(",
											"        pm.response.json()",
											"    ).length.to.be.above(0)",
											"});",
											"",
											"",
											"pm.test(\"Sorting works\", function () {",
											"    pm.expect(",
											"        pm.response.json()[0].id",
											"    ).to.be.equal(",
											"        pm.globals.get(\"firstUserNoteId\")",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/collaborated?sort=DESC&tags=ww2&tags=trip",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"collaborated"
									],
									"query": [
										{
											"key": "sort",
											"value": "DESC"
										},
										{
											"key": "tags",
											"value": "ww2"
										},
										{
											"key": "tags",
											"value": "trip"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get private notes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response is array\", function () {",
											"    pm.expect(",
											"        pm.response.json()",
											"    ).length.to.be.above(0)",
											"});",
											"",
											"",
											"pm.test(\"Sorting works\", function () {",
											"    pm.expect(",
											"        pm.response.json()[0].id",
											"    ).to.be.equal(",
											"        pm.globals.get(\"firstUserNoteId\")",
											"    )",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/my?sort=DESC&tags=ww2&tags=trip",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"my"
									],
									"query": [
										{
											"key": "sort",
											"value": "DESC"
										},
										{
											"key": "tags",
											"value": "ww2"
										},
										{
											"key": "tags",
											"value": "trip"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Get collaborated notes without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/collaborated?sort=DESC&tags=ww2&tags=trip",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"collaborated"
									],
									"query": [
										{
											"key": "sort",
											"value": "DESC"
										},
										{
											"key": "tags",
											"value": "ww2"
										},
										{
											"key": "tags",
											"value": "trip"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get private notes without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/my?sort=DESC&tags=ww2&tags=trip",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"my"
									],
									"query": [
										{
											"key": "sort",
											"value": "DESC"
										},
										{
											"key": "tags",
											"value": "ww2"
										},
										{
											"key": "tags",
											"value": "trip"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete note",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Delete note from collaborator (2nd user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'success' field exists\", function () {",
											"    pm.expect(pm.response.json().success).to.be.equal(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{secondUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete note from owner (1st user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"'success' field exists\", function () {",
											"    pm.expect(pm.response.json().success).to.be.equal(true)",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Delete note without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/{{firstUserNoteId}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"{{firstUserNoteId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete note that doesn't exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{firstUserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/api/v1/notes/12345678",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"v1",
										"notes",
										"12345678"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Content-Type is present\", function () {",
					"    pm.response.to.have.header(\"Content-Type\");",
					"});",
					"",
					"pm.test(\"Response time is in good range\", () => {",
					"    switch (pm.request.method) {",
					"        case \"GET\":",
					"            pm.expect(pm.response.responseTime).to.be.below(150);",
					"            break",
					"        case \"POST\":",
					"            pm.expect(pm.response.responseTime).to.be.below(300);",
					"            break",
					"        case \"PATCH\" || \"PUT\":",
					"            pm.expect(pm.response.responseTime).to.be.below(200);",
					"            break",
					"    }",
					"})",
					"// pm.test(\"Status code is not 503 or 500\", function () {",
					"//     pm.response.to.not.have.status(503);",
					"//     pm.response.to.not.have.status(500);",
					"",
					"// });",
					"",
					"const statusCode = pm.response.json().statusCode",
					"if (statusCode >= 400 && statusCode < 500) {",
					"    pm.test(\"Error message exists\", () => {",
					"        pm.expect(pm.response.json().message).length.is.above(0)",
					"    })",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8000",
			"type": "string"
		},
		{
			"key": "protocol",
			"value": "http",
			"type": "string"
		}
	]
}